esphome:
  name: heater
  platform: ESP32
  board: nodemcu-32s
  platformio_options:
     upload_speed: 921600

#wifi:
#  ssid: "test"
#  password: "12345678"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
#  ap:
#    ssid: "heater Fallback Hotspot"
#    password: "12345678"
    
#  reboot_timeout: 0s
#  power_save_mode: HIGH

#captive_portal:

# Enable logging
logger:
  level: DEBUG
    
# Enable Home Assistant API
#api:

#ota:

# Активация web сервера
#web_server:
#  port: 80

globals:
   - id: counter_sec
     type: unsigned int
     restore_value: no
     initial_value: '0'     
   - id: device_mode
     type: int
     restore_value: no
     initial_value: '-1'

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      inverted: true
      mode: INPUT_PULLUP
    filters:
      - delayed_on: 50ms
    name: "Switch button"

script:
  - id: check_mode
    then:
      - lambda: |-
            if (id(device_mode) == -1 )
            {
              id(device_mode) = 0;
              auto call = id(my_climate).make_call();
                call.set_mode("AUTO");
                call.set_away(false);
                call.perform();
              id(relay_2).turn_on();
              id(counter_sec) = 0;
            }
            if (id(device_mode) == 0 )
            {
              if (id(temp_1).state > id(my_climate).target_temperature_low)
              {
                id(device_mode) = 1;
                id(counter_sec) = 0;
              };
            }
            if (id(device_mode) == 1 )
            {
              if (id(counter_sec) >= 30 * 60) //ВРЕМЯ КИПЯЧЕНИЯ
              {
                id(device_mode) = 2;
                id(relay_2).turn_off();
                id(counter_sec) = 0;
                auto call = id(my_climate).make_call();
                  call.set_away(true);
                  call.perform();
              }
            }

font:
  - file: "tahoma.ttf"   
    id: my_font
    size: 26                
  - file: "tahoma.ttf"   
    id: my_font_s
    size: 10   
spi:
  clk_pin: GPIO26
  mosi_pin: GPIO25
  
display:
  - platform: ST7920_spi
    reset_pin: GPIO27
    cs_pin: GPIO33
    rotation: 180°
    id: my_display
    lambda: |-
        it.printf(0, 14, id(my_font), "%02d:%02d", id(counter_sec) / 60 / 60, id(counter_sec) / 60 % 60);
        
        if (id(device_mode) == 0 )    
            it.print(74, 3, id(my_font_s), "HEATING");
        if (id(device_mode) == 1  )    
            it.print(74, 3, id(my_font_s), "BOILING");
        if (id(device_mode) == 2  )    
            it.print(74, 3, id(my_font_s), "WAITING");
        
        if (id(relay_1).state)
        {
            it.filled_rectangle(70, 16, 20, 9);
            it.print(77, 14, id(my_font_s), COLOR_OFF, "1");
        }
        if (id(relay_2).state)
        {
            it.filled_rectangle(100, 16, 20, 9);
            it.print(107, 14, id(my_font_s), COLOR_OFF, "2");
        }
        
        it.printf(1, 45, id(my_font), "%3.0f°C", id(temp_1).state);
        
        it.print(90, 34, id(my_font_s), "Target:");
        
        if (id(relay_1).state && id(device_mode) > 0)
            it.printf(90, 52, id(my_font_s), "%3.0f°C", id(my_climate).target_temperature_high);
        else
            it.printf(90, 52, id(my_font_s), "%3.0f°C", id(my_climate).target_temperature_low);
            
        //it.printf(70, 30, id(my_font_s), "%.3f", id(temp_1).raw_state);
        //it.printf(100, 30, id(my_font_s), "%.1f", id(temp_2).state);
        

#dallas:
#  - pin: GPIO32
#    update_interval: 10s

# Individual sensors
sensor:   
  - platform: uptime
    name: Uptime Sensor
    update_interval: 5min
#  - platform: dallas
#    name: "Temperature #1"
#    address: 0xB4041590482EFF28
#    id: temp_2
  - platform: adc
    attenuation: 0db
    pin: GPIO34
    id: temp_1
    update_interval: 5s
    filters:
#      - median:
#            window_size: 6
#            send_every: 3
#            send_first_at: 2
      - calibrate_linear:
#          - 0.371 -> 0.40
#          - 1.869 -> 1.6
          - 0.150 -> 43.00
          - 0.730 -> 136.0 
    on_value:
      then:
        - script.execute: check_mode
        - component.update: my_display

switch:
  - platform: gpio
    pin:
       number: GPIO16
       inverted: true
    id: relay_1
    restore_mode: ALWAYS_OFF
  - platform: gpio
    pin:
       number: GPIO17
       inverted: true
    id: relay_2
    restore_mode: ALWAYS_OFF
  - platform: gpio
    pin:
       number: GPIO18
       inverted: true
    id: relay_3
    restore_mode: ALWAYS_OFF
  - platform: gpio
    pin:
       number: GPIO15
       inverted: false
    id: ref_adc
    restore_mode: ALWAYS_ON
    
interval:
  - interval: 1s
    then:
      - lambda: 'id(counter_sec) += 1;'

climate:
  - platform: bang_bang
    name: "Bang Bang Climate Controller"
    sensor: temp_1
    default_target_temperature_low: 127 °C  #УСТАВКА КИПЯЧЕНИЯ минимальная
    default_target_temperature_high: 133 °C #УСТАВКА КИПЯЧЕНИЯ максимальная
    id: my_climate
    away_config:
      default_target_temperature_low: 77 °C  #УСТАВКА ОЖИДАНИЯ минимальная
      default_target_temperature_high: 83 °C #УСТАВКА ОЖИДАНИЯ минимальная
    visual:
      min_temperature: 20 °C
      max_temperature: 140 °C
      temperature_step: 1 °C
    heat_action:
      - switch.turn_on: relay_1
    idle_action:
      - switch.turn_off: relay_1
      
